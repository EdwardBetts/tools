#!/usr/bin/perl

use v5.10;
use warnings;
use strict;
use open ':locale';
use Getopt::Long;
use Speech::eSpeak 0.5;
use XML::LibXML;
use XML::LibXSLT;
use XML::LibXML::XPathContext;

my $verbose = 0;
my $help = 0;
my $infile = 'fd/eng-ita/eng-ita.tei';
my $outfile;
my $inlang;
my $dryrun = 0;

GetOptions("verbose" => \$verbose,
  "infile=s" => \$infile,
  "outfile=s" => \$outfile,
  "inlang=s" => \$inlang,
  "help" => \$help,
  "dry-run" => \$dryrun,
  ) or die("Error in command line arguments\n");

if($help)
{
  say <<"EOT";
    $0

    This script adds pronunciation information to the headwords of a TEI file.
    It goes through all <orth> elements and adds <pron> element following them,
    unless <pron> already exists.  This allows to override the espeak
    pronunciation.

    It works similar to 'espeak -v de --ipa ok', but uses the espeak
    API directly.

    Options:

	--dry-run

		Don't write OUTFILE.

	--help

		This help.

	--infile, -i <INFILE>
		
		Use INFILE as input.

		Example: -i eng-ita.tei

	--inlang, -l <CODE>

		Language of the headwords in INFILE.  The CODE is used to
		select the speaker language of espeak.  If not given,
		the basename of INFILE is assumed to have the form la1-la2.tei,
		as used in FreeDict and is translated to the corresponding
		espeak code.

		Example: -l de

	--outfile, -o <OUTFILE>

		Use OUTFILE for output.  If not given, "INFILE.withpron" is used.

		Example: -o output.tei

	--verbose
		
		Say what is going on.

EOT
  exit 0;
}

unless(defined $infile) { say "--infile not given"; exit 1 };
unless(-r $infile) { say "$infile not readable"; exit 1 };
$outfile ||= "$infile.withpron";

say "espeak version: ", Speech::eSpeak::espeak_Info(0) if $verbose;
my $speaker = Speech::eSpeak::new;

sub iso639_2T_to_1
{
  my $code_2T = shift;
  my $isofile = '/usr/share/xml/iso-codes/iso_639.xml';
  die "Missing $isofile (In Debian install package iso-codes)!" unless -r $isofile;
  my $isodoc = XML::LibXML->load_xml(location => $isofile);
  my $xpc = XML::LibXML::XPathContext->new($isodoc);
  my $expr = '/iso_639_entries/iso_639_entry/@iso_639_1_code[ ../@iso_639_2T_code=\'' . $code_2T . '\' ]';
  say "Evaluating $expr..." if $verbose>1;
  my $code_1 = $xpc->findvalue($expr);
  say "Translated '$code_2T' to '$code_1'" if $verbose;
  return $code_1;
}

unless(defined $inlang)
{
  unless($infile =~ /(\w{3})-\w{3}\.tei$/)
  {
    say "Could not guess input language from $infile.  Please provide --inlang."; 
    exit 3;
  }
  my $in3 = $1;
  $inlang = iso639_2T_to_1($in3);
  if(!defined($inlang) or $inlang eq '')
  {
    say "Failed to find input languge from 3 letter code $in3";
    exit 4
  }
}
$speaker->language($inlang);
say "Using language: ", $speaker->language if $verbose;
unless($speaker->language eq $inlang)
{
  say "Language not supported.  Add --verbose to see the espeak supported languages.";
  if($verbose)
  {
    say "espeak supported voices/languages:\n";
    my $voices = Speech::eSpeak::espeak_ListVoices('');
    foreach my $voice_spec (@{$voices}) {
      foreach (sort keys %{$voice_spec}) {
        print $_, '=', $voice_spec->{$_}, ' ';
      }
      print "\n";
    }
  }
  exit 2;
}

XML::LibXSLT->register_function("urn:espeak", "ipa",
	sub { $speaker->ipa(shift); });
my $sdoc = XML::LibXML->load_xml(string => <<'EOT');
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:espeak="urn:espeak"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  exclude-result-prefixes="tei espeak">

  <xsl:template match="tei:orth[not(boolean(following-sibling::tei:pron))]">
    <xsl:copy>
      <xsl:apply-templates match="@*|node()"/>
    </xsl:copy>
    <pron xmlns="http://www.tei-c.org/ns/1.0"><xsl:value-of select="espeak:ipa(.)"/></pron>
  </xsl:template>

  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
  </xsl:template>

</xsl:stylesheet>
EOT
my $xslt = XML::LibXSLT->new();
my $stylesheet = $xslt->parse_stylesheet($sdoc);
print "Transforming $infile to $outfile... " if $verbose;
my $results = $stylesheet->transform_file($infile);
$stylesheet->output_file($results, $outfile) unless $dryrun;
say "done." if $verbose;

